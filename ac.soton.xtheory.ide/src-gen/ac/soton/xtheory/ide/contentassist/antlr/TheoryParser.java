/*
 * generated by Xtext 2.13.0
 */
package ac.soton.xtheory.ide.contentassist.antlr;

import ac.soton.xtheory.ide.contentassist.antlr.internal.InternalTheoryParser;
import ac.soton.xtheory.services.TheoryGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TheoryParser extends AbstractContentAssistParser {

	@Inject
	private TheoryGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTheoryParser createParser() {
		InternalTheoryParser result = new InternalTheoryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTheoryAccess().getAlternatives_4(), "rule__Theory__Alternatives_4");
					put(grammarAccess.getTypeAccess().getCommentAlternatives_0_0(), "rule__Type__CommentAlternatives_0_0");
					put(grammarAccess.getConstructorAccess().getCommentAlternatives_0_0(), "rule__Constructor__CommentAlternatives_0_0");
					put(grammarAccess.getDestructorAccess().getCommentAlternatives_0_0(), "rule__Destructor__CommentAlternatives_0_0");
					put(grammarAccess.getOperatorAccess().getCommentAlternatives_0_0(), "rule__Operator__CommentAlternatives_0_0");
					put(grammarAccess.getOperatorAccess().getAlternatives_6_1(), "rule__Operator__Alternatives_6_1");
					put(grammarAccess.getArgumentAccess().getCommentAlternatives_0_0(), "rule__Argument__CommentAlternatives_0_0");
					put(grammarAccess.getAxiomAccess().getCommentAlternatives_0_0(), "rule__Axiom__CommentAlternatives_0_0");
					put(grammarAccess.getTheoremAccess().getCommentAlternatives_0_0(), "rule__Theorem__CommentAlternatives_0_0");
					put(grammarAccess.getRuleBlockAccess().getCommentAlternatives_0_0(), "rule__RuleBlock__CommentAlternatives_0_0");
					put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
					put(grammarAccess.getVariableAccess().getCommentAlternatives_0_0(), "rule__Variable__CommentAlternatives_0_0");
					put(grammarAccess.getRewriteRuleAccess().getAlternatives_2(), "rule__RewriteRule__Alternatives_2");
					put(grammarAccess.getNotationAccess().getAlternatives(), "rule__Notation__Alternatives");
					put(grammarAccess.getTheoryAccess().getGroup(), "rule__Theory__Group__0");
					put(grammarAccess.getTheoryAccess().getGroup_2(), "rule__Theory__Group_2__0");
					put(grammarAccess.getTheoryAccess().getGroup_3(), "rule__Theory__Group_3__0");
					put(grammarAccess.getTheoryAccess().getGroup_4_0(), "rule__Theory__Group_4_0__0");
					put(grammarAccess.getTheoryAccess().getGroup_4_1(), "rule__Theory__Group_4_1__0");
					put(grammarAccess.getTheoryAccess().getGroup_4_2(), "rule__Theory__Group_4_2__0");
					put(grammarAccess.getTheoryAccess().getGroup_4_3(), "rule__Theory__Group_4_3__0");
					put(grammarAccess.getTheoryAccess().getGroup_4_4(), "rule__Theory__Group_4_4__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getTypeAccess().getGroup_5(), "rule__Type__Group_5__0");
					put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
					put(grammarAccess.getConstructorAccess().getGroup_2(), "rule__Constructor__Group_2__0");
					put(grammarAccess.getConstructorAccess().getGroup_2_2(), "rule__Constructor__Group_2_2__0");
					put(grammarAccess.getDestructorAccess().getGroup(), "rule__Destructor__Group__0");
					put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
					put(grammarAccess.getOperatorAccess().getGroup_2(), "rule__Operator__Group_2__0");
					put(grammarAccess.getOperatorAccess().getGroup_2_2(), "rule__Operator__Group_2_2__0");
					put(grammarAccess.getOperatorAccess().getGroup_3_0(), "rule__Operator__Group_3_0__0");
					put(grammarAccess.getOperatorAccess().getGroup_3_2(), "rule__Operator__Group_3_2__0");
					put(grammarAccess.getOperatorAccess().getGroup_4(), "rule__Operator__Group_4__0");
					put(grammarAccess.getOperatorAccess().getGroup_5(), "rule__Operator__Group_5__0");
					put(grammarAccess.getOperatorAccess().getGroup_6(), "rule__Operator__Group_6__0");
					put(grammarAccess.getOperatorAccess().getGroup_6_1_1(), "rule__Operator__Group_6_1_1__0");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getAxiomAccess().getGroup(), "rule__Axiom__Group__0");
					put(grammarAccess.getTheoremAccess().getGroup(), "rule__Theorem__Group__0");
					put(grammarAccess.getRuleBlockAccess().getGroup(), "rule__RuleBlock__Group__0");
					put(grammarAccess.getRuleBlockAccess().getGroup_4(), "rule__RuleBlock__Group_4__0");
					put(grammarAccess.getRuleBlockAccess().getGroup_4_0(), "rule__RuleBlock__Group_4_0__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getRewriteRuleAccess().getGroup(), "rule__RewriteRule__Group__0");
					put(grammarAccess.getInferenceRuleAccess().getGroup(), "rule__InferenceRule__Group__0");
					put(grammarAccess.getGivenAccess().getGroup(), "rule__Given__Group__0");
					put(grammarAccess.getConditionalRewriteAccess().getGroup(), "rule__ConditionalRewrite__Group__0");
					put(grammarAccess.getConditionalRewriteRuleAccess().getGroup(), "rule__ConditionalRewriteRule__Group__0");
					put(grammarAccess.getTheoryAccess().getNameAssignment_1(), "rule__Theory__NameAssignment_1");
					put(grammarAccess.getTheoryAccess().getParametersAssignment_2_1(), "rule__Theory__ParametersAssignment_2_1");
					put(grammarAccess.getTheoryAccess().getImportsAssignment_3_1(), "rule__Theory__ImportsAssignment_3_1");
					put(grammarAccess.getTheoryAccess().getImportsAssignment_3_2(), "rule__Theory__ImportsAssignment_3_2");
					put(grammarAccess.getTheoryAccess().getInternalElementsAssignment_4_0_1(), "rule__Theory__InternalElementsAssignment_4_0_1");
					put(grammarAccess.getTheoryAccess().getInternalElementsAssignment_4_1_1(), "rule__Theory__InternalElementsAssignment_4_1_1");
					put(grammarAccess.getTheoryAccess().getInternalElementsAssignment_4_2_1(), "rule__Theory__InternalElementsAssignment_4_2_1");
					put(grammarAccess.getTheoryAccess().getInternalElementsAssignment_4_3_1(), "rule__Theory__InternalElementsAssignment_4_3_1");
					put(grammarAccess.getTheoryAccess().getInternalElementsAssignment_4_4_1(), "rule__Theory__InternalElementsAssignment_4_4_1");
					put(grammarAccess.getParameterAccess().getNameAssignment(), "rule__Parameter__NameAssignment");
					put(grammarAccess.getTypeAccess().getCommentAssignment_0(), "rule__Type__CommentAssignment_0");
					put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getParametersAssignment_2_1(), "rule__Type__ParametersAssignment_2_1");
					put(grammarAccess.getTypeAccess().getConstructorsAssignment_4(), "rule__Type__ConstructorsAssignment_4");
					put(grammarAccess.getTypeAccess().getConstructorsAssignment_5_1(), "rule__Type__ConstructorsAssignment_5_1");
					put(grammarAccess.getConstructorAccess().getCommentAssignment_0(), "rule__Constructor__CommentAssignment_0");
					put(grammarAccess.getConstructorAccess().getNameAssignment_1(), "rule__Constructor__NameAssignment_1");
					put(grammarAccess.getConstructorAccess().getDestructorsAssignment_2_1(), "rule__Constructor__DestructorsAssignment_2_1");
					put(grammarAccess.getConstructorAccess().getDestructorsAssignment_2_2_1(), "rule__Constructor__DestructorsAssignment_2_2_1");
					put(grammarAccess.getDestructorAccess().getCommentAssignment_0(), "rule__Destructor__CommentAssignment_0");
					put(grammarAccess.getDestructorAccess().getNameAssignment_1(), "rule__Destructor__NameAssignment_1");
					put(grammarAccess.getDestructorAccess().getTypeAssignment_3(), "rule__Destructor__TypeAssignment_3");
					put(grammarAccess.getOperatorAccess().getCommentAssignment_0(), "rule__Operator__CommentAssignment_0");
					put(grammarAccess.getOperatorAccess().getNameAssignment_1(), "rule__Operator__NameAssignment_1");
					put(grammarAccess.getOperatorAccess().getArgumentsAssignment_2_1(), "rule__Operator__ArgumentsAssignment_2_1");
					put(grammarAccess.getOperatorAccess().getArgumentsAssignment_2_2_1(), "rule__Operator__ArgumentsAssignment_2_2_1");
					put(grammarAccess.getOperatorAccess().getTypeAssignment_3_0_1(), "rule__Operator__TypeAssignment_3_0_1");
					put(grammarAccess.getOperatorAccess().getNotationAssignment_3_1(), "rule__Operator__NotationAssignment_3_1");
					put(grammarAccess.getOperatorAccess().getAssociativeAssignment_3_2_0(), "rule__Operator__AssociativeAssignment_3_2_0");
					put(grammarAccess.getOperatorAccess().getCommutativeAssignment_3_2_1(), "rule__Operator__CommutativeAssignment_3_2_1");
					put(grammarAccess.getOperatorAccess().getPrecedentAssignment_4_1(), "rule__Operator__PrecedentAssignment_4_1");
					put(grammarAccess.getOperatorAccess().getWdAssignment_5_1(), "rule__Operator__WdAssignment_5_1");
					put(grammarAccess.getOperatorAccess().getDefinitionAssignment_6_1_0(), "rule__Operator__DefinitionAssignment_6_1_0");
					put(grammarAccess.getOperatorAccess().getCaseAssignment_6_1_1_1(), "rule__Operator__CaseAssignment_6_1_1_1");
					put(grammarAccess.getOperatorAccess().getCasesAssignment_6_1_1_2(), "rule__Operator__CasesAssignment_6_1_1_2");
					put(grammarAccess.getArgumentAccess().getCommentAssignment_0(), "rule__Argument__CommentAssignment_0");
					put(grammarAccess.getArgumentAccess().getNameAssignment_1(), "rule__Argument__NameAssignment_1");
					put(grammarAccess.getArgumentAccess().getTypeAssignment_3(), "rule__Argument__TypeAssignment_3");
					put(grammarAccess.getCaseAccess().getPatternAssignment_0(), "rule__Case__PatternAssignment_0");
					put(grammarAccess.getCaseAccess().getFormulaAssignment_2(), "rule__Case__FormulaAssignment_2");
					put(grammarAccess.getAxiomAccess().getCommentAssignment_0(), "rule__Axiom__CommentAssignment_0");
					put(grammarAccess.getAxiomAccess().getNameAssignment_2(), "rule__Axiom__NameAssignment_2");
					put(grammarAccess.getAxiomAccess().getPredicateAssignment_4(), "rule__Axiom__PredicateAssignment_4");
					put(grammarAccess.getTheoremAccess().getCommentAssignment_0(), "rule__Theorem__CommentAssignment_0");
					put(grammarAccess.getTheoremAccess().getNameAssignment_2(), "rule__Theorem__NameAssignment_2");
					put(grammarAccess.getTheoremAccess().getPredicateAssignment_4(), "rule__Theorem__PredicateAssignment_4");
					put(grammarAccess.getRuleBlockAccess().getCommentAssignment_0(), "rule__RuleBlock__CommentAssignment_0");
					put(grammarAccess.getRuleBlockAccess().getNameAssignment_2(), "rule__RuleBlock__NameAssignment_2");
					put(grammarAccess.getRuleBlockAccess().getVariablesAssignment_4_0_1(), "rule__RuleBlock__VariablesAssignment_4_0_1");
					put(grammarAccess.getRuleBlockAccess().getRuleAssignment_4_1(), "rule__RuleBlock__RuleAssignment_4_1");
					put(grammarAccess.getRuleAccess().getRruleAssignment_0(), "rule__Rule__RruleAssignment_0");
					put(grammarAccess.getRuleAccess().getIruleAssignment_1(), "rule__Rule__IruleAssignment_1");
					put(grammarAccess.getVariableAccess().getCommentAssignment_0(), "rule__Variable__CommentAssignment_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getTypeAssignment_3(), "rule__Variable__TypeAssignment_3");
					put(grammarAccess.getRewriteRuleAccess().getPatternAssignment_0(), "rule__RewriteRule__PatternAssignment_0");
					put(grammarAccess.getRewriteRuleAccess().getUruleAssignment_2_0(), "rule__RewriteRule__UruleAssignment_2_0");
					put(grammarAccess.getRewriteRuleAccess().getCruleAssignment_2_1(), "rule__RewriteRule__CruleAssignment_2_1");
					put(grammarAccess.getInferenceRuleAccess().getGivenAssignment_0(), "rule__InferenceRule__GivenAssignment_0");
					put(grammarAccess.getInferenceRuleAccess().getInferAssignment_2(), "rule__InferenceRule__InferAssignment_2");
					put(grammarAccess.getGivenAccess().getExpressionAssignment_0(), "rule__Given__ExpressionAssignment_0");
					put(grammarAccess.getGivenAccess().getRequiredAssignment_1(), "rule__Given__RequiredAssignment_1");
					put(grammarAccess.getInferAccess().getExpressionAssignment(), "rule__Infer__ExpressionAssignment");
					put(grammarAccess.getUnconditionalRewriteAccess().getRhsAssignment(), "rule__UnconditionalRewrite__RhsAssignment");
					put(grammarAccess.getConditionalRewriteAccess().getRewritesAssignment_0(), "rule__ConditionalRewrite__RewritesAssignment_0");
					put(grammarAccess.getConditionalRewriteAccess().getRewritesAssignment_1(), "rule__ConditionalRewrite__RewritesAssignment_1");
					put(grammarAccess.getConditionalRewriteRuleAccess().getLhsAssignment_0(), "rule__ConditionalRewriteRule__LhsAssignment_0");
					put(grammarAccess.getConditionalRewriteRuleAccess().getRhsAssignment_2(), "rule__ConditionalRewriteRule__RhsAssignment_2");
					put(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), "rule__Operator__UnorderedGroup_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}

	public TheoryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TheoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
