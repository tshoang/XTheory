/*
 * generated by Xtext 2.13.0
 */
grammar InternalTheory;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.xtheory.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xtheory.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xtheory.services.TheoryGrammarAccess;

}

@parser::members {

 	private TheoryGrammarAccess grammarAccess;

    public InternalTheoryParser(TokenStream input, TheoryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Theory";
   	}

   	@Override
   	protected TheoryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTheory
entryRuleTheory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoryRule()); }
	iv_ruleTheory=ruleTheory
	{ $current=$iv_ruleTheory.current; }
	EOF;

// Rule Theory
ruleTheory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='theory'
		{
			newLeafNode(otherlv_0, grammarAccess.getTheoryAccess().getTheoryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTheoryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTheoryAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTheoryAccess().getParametersParameterParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTheoryRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"ac.soton.xtheory.Theory.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTheoryAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		(
			otherlv_5='imports'
			{
				newLeafNode(otherlv_5, grammarAccess.getTheoryAccess().getImportsKeyword_3_0());
			}
			(
				(
					lv_imports_6_0=RULE_ID
					{
						newLeafNode(lv_imports_6_0, grammarAccess.getTheoryAccess().getImportsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTheoryRule());
						}
						addWithLastConsumed(
							$current,
							"imports",
							lv_imports_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_imports_7_0=RULE_ID
					{
						newLeafNode(lv_imports_7_0, grammarAccess.getTheoryAccess().getImportsIDTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTheoryRule());
						}
						addWithLastConsumed(
							$current,
							"imports",
							lv_imports_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)*
		)?
		(
			(
				otherlv_8='types'
				{
					newLeafNode(otherlv_8, grammarAccess.getTheoryAccess().getTypesKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTheoryAccess().getInternalElementsTypeParserRuleCall_4_0_1_0());
						}
						lv_internalElements_9_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTheoryRule());
							}
							add(
								$current,
								"internalElements",
								lv_internalElements_9_0,
								"ac.soton.xtheory.Theory.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
			    |
			(
				otherlv_10='operators'
				{
					newLeafNode(otherlv_10, grammarAccess.getTheoryAccess().getOperatorsKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTheoryAccess().getInternalElementsOperatorParserRuleCall_4_1_1_0());
						}
						lv_internalElements_11_0=ruleOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTheoryRule());
							}
							add(
								$current,
								"internalElements",
								lv_internalElements_11_0,
								"ac.soton.xtheory.Theory.Operator");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
			    |
			(
				otherlv_12='axioms'
				{
					newLeafNode(otherlv_12, grammarAccess.getTheoryAccess().getAxiomsKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTheoryAccess().getInternalElementsAxiomParserRuleCall_4_2_1_0());
						}
						lv_internalElements_13_0=ruleAxiom
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTheoryRule());
							}
							add(
								$current,
								"internalElements",
								lv_internalElements_13_0,
								"ac.soton.xtheory.Theory.Axiom");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
			    |
			(
				otherlv_14='theorems'
				{
					newLeafNode(otherlv_14, grammarAccess.getTheoryAccess().getTheoremsKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTheoryAccess().getInternalElementsTheoremParserRuleCall_4_3_1_0());
						}
						lv_internalElements_15_0=ruleTheorem
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTheoryRule());
							}
							add(
								$current,
								"internalElements",
								lv_internalElements_15_0,
								"ac.soton.xtheory.Theory.Theorem");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
			    |
			(
				otherlv_16='rules'
				{
					newLeafNode(otherlv_16, grammarAccess.getTheoryAccess().getRulesKeyword_4_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTheoryAccess().getInternalElementsRuleBlockParserRuleCall_4_4_1_0());
						}
						lv_internalElements_17_0=ruleRuleBlock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTheoryRule());
							}
							add(
								$current,
								"internalElements",
								lv_internalElements_17_0,
								"ac.soton.xtheory.Theory.RuleBlock");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
		)*
		otherlv_18='end'
		{
			newLeafNode(otherlv_18, grammarAccess.getTheoryAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getTypeAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getTypeAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getParametersParameterCrossReference_2_1_0());
					}
				)
			)+
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getConstructorsConstructorParserRuleCall_4_0());
				}
				lv_constructors_6_0=ruleConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					add(
						$current,
						"constructors",
						lv_constructors_6_0,
						"ac.soton.xtheory.Theory.Constructor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='|'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getVerticalLineKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getConstructorsConstructorParserRuleCall_5_1_0());
					}
					lv_constructors_8_0=ruleConstructor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						add(
							$current,
							"constructors",
							lv_constructors_8_0,
							"ac.soton.xtheory.Theory.Constructor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getConstructorAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstructorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getConstructorAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstructorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstructorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstructorAccess().getDestructorsDestructorParserRuleCall_2_1_0());
					}
					lv_destructors_3_0=ruleDestructor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstructorRule());
						}
						add(
							$current,
							"destructors",
							lv_destructors_3_0,
							"ac.soton.xtheory.Theory.Destructor");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getConstructorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstructorAccess().getDestructorsDestructorParserRuleCall_2_2_1_0());
						}
						lv_destructors_5_0=ruleDestructor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstructorRule());
							}
							add(
								$current,
								"destructors",
								lv_destructors_5_0,
								"ac.soton.xtheory.Theory.Destructor");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_2_3());
			}
		)?
	)
;

// Entry rule entryRuleDestructor
entryRuleDestructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDestructorRule()); }
	iv_ruleDestructor=ruleDestructor
	{ $current=$iv_ruleDestructor.current; }
	EOF;

// Rule Destructor
ruleDestructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getDestructorAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDestructorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getDestructorAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDestructorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDestructorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestructorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDestructorAccess().getColonKeyword_2());
		}
		(
			(
				lv_type_3_0=RULE_STRING
				{
					newLeafNode(lv_type_3_0, grammarAccess.getDestructorAccess().getTypeSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDestructorRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getOperatorAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getOperatorAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOperatorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperatorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperatorAccess().getArgumentsArgumentParserRuleCall_2_1_0());
					}
					lv_arguments_3_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperatorRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"ac.soton.xtheory.Theory.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperatorAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperatorAccess().getArgumentsArgumentParserRuleCall_2_2_1_0());
						}
						lv_arguments_5_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperatorRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"ac.soton.xtheory.Theory.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getOperatorAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getOperatorAccess().getUnorderedGroup_3());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 0);
					}
								({true}?=>(otherlv_8=':'
								{
									newLeafNode(otherlv_8, grammarAccess.getOperatorAccess().getColonKeyword_3_0_0());
								}
								(
									(
										lv_type_9_0=RULE_STRING
										{
											newLeafNode(lv_type_9_0, grammarAccess.getOperatorAccess().getTypeSTRINGTerminalRuleCall_3_0_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getOperatorRule());
											}
											setWithLastConsumed(
												$current,
												"type",
												lv_type_9_0,
												"org.eclipse.xtext.common.Terminals.STRING");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperatorAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getOperatorAccess().getNotationNotationEnumRuleCall_3_1_0());
									}
									lv_notation_10_0=ruleNotation
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getOperatorRule());
										}
										set(
											$current,
											"notation",
											lv_notation_10_0,
											"ac.soton.xtheory.Theory.Notation");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperatorAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getOperatorAccess().getUnorderedGroup_3(), 2);
					}
								({true}?=>((
									(
										lv_associative_11_0='associative'
										{
											newLeafNode(lv_associative_11_0, grammarAccess.getOperatorAccess().getAssociativeAssociativeKeyword_3_2_0_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getOperatorRule());
											}
											setWithLastConsumed($current, "associative", true, "associative");
										}
									)
								)
								(
									(
										lv_commutative_12_0='commutative'
										{
											newLeafNode(lv_commutative_12_0, grammarAccess.getOperatorAccess().getCommutativeCommutativeKeyword_3_2_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getOperatorRule());
											}
											setWithLastConsumed($current, "commutative", true, "commutative");
										}
									)
								)?
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperatorAccess().getUnorderedGroup_3());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getOperatorAccess().getUnorderedGroup_3());
				}
		)
		(
			otherlv_13='#'
			{
				newLeafNode(otherlv_13, grammarAccess.getOperatorAccess().getNumberSignKeyword_4_0());
			}
			(
				(
					lv_precedent_14_0=RULE_INT
					{
						newLeafNode(lv_precedent_14_0, grammarAccess.getOperatorAccess().getPrecedentINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"precedent",
							lv_precedent_14_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_15='for'
			{
				newLeafNode(otherlv_15, grammarAccess.getOperatorAccess().getForKeyword_5_0());
			}
			(
				(
					lv_wd_16_0=RULE_STRING
					{
						newLeafNode(lv_wd_16_0, grammarAccess.getOperatorAccess().getWdSTRINGTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"wd",
							lv_wd_16_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_17='='
			{
				newLeafNode(otherlv_17, grammarAccess.getOperatorAccess().getEqualsSignKeyword_6_0());
			}
			(
				(
					(
						lv_definition_18_0=RULE_STRING
						{
							newLeafNode(lv_definition_18_0, grammarAccess.getOperatorAccess().getDefinitionSTRINGTerminalRuleCall_6_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOperatorRule());
							}
							setWithLastConsumed(
								$current,
								"definition",
								lv_definition_18_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
				    |
				(
					otherlv_19='case'
					{
						newLeafNode(otherlv_19, grammarAccess.getOperatorAccess().getCaseKeyword_6_1_1_0());
					}
					(
						(
							lv_case_20_0=RULE_ID
							{
								newLeafNode(lv_case_20_0, grammarAccess.getOperatorAccess().getCaseIDTerminalRuleCall_6_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getOperatorRule());
								}
								setWithLastConsumed(
									$current,
									"case",
									lv_case_20_0,
									"org.eclipse.xtext.common.Terminals.ID");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getOperatorAccess().getCasesCaseParserRuleCall_6_1_1_2_0());
							}
							lv_cases_21_0=ruleCase
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOperatorRule());
								}
								add(
									$current,
									"cases",
									lv_cases_21_0,
									"ac.soton.xtheory.Theory.Case");
								afterParserOrEnumRuleCall();
							}
						)
					)+
				)
			)
		)?
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getArgumentAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArgumentRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getArgumentAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArgumentRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getArgumentAccess().getColonKeyword_2());
		}
		(
			(
				lv_type_3_0=RULE_STRING
				{
					newLeafNode(lv_type_3_0, grammarAccess.getArgumentAccess().getTypeSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_pattern_0_0=RULE_STRING
				{
					newLeafNode(lv_pattern_0_0, grammarAccess.getCaseAccess().getPatternSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseRule());
					}
					setWithLastConsumed(
						$current,
						"pattern",
						lv_pattern_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_formula_2_0=RULE_STRING
				{
					newLeafNode(lv_formula_2_0, grammarAccess.getCaseAccess().getFormulaSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseRule());
					}
					setWithLastConsumed(
						$current,
						"formula",
						lv_formula_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAxiom
entryRuleAxiom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAxiomRule()); }
	iv_ruleAxiom=ruleAxiom
	{ $current=$iv_ruleAxiom.current; }
	EOF;

// Rule Axiom
ruleAxiom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getAxiomAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAxiomRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getAxiomAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAxiomRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getAxiomAccess().getCommercialAtKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAxiomAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAxiomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAxiomAccess().getColonKeyword_3());
		}
		(
			(
				lv_predicate_4_0=RULE_STRING
				{
					newLeafNode(lv_predicate_4_0, grammarAccess.getAxiomAccess().getPredicateSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAxiomRule());
					}
					setWithLastConsumed(
						$current,
						"predicate",
						lv_predicate_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTheorem
entryRuleTheorem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoremRule()); }
	iv_ruleTheorem=ruleTheorem
	{ $current=$iv_ruleTheorem.current; }
	EOF;

// Rule Theorem
ruleTheorem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getTheoremAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTheoremRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getTheoremAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTheoremRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getTheoremAccess().getCommercialAtKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTheoremAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoremRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getTheoremAccess().getColonKeyword_3());
		}
		(
			(
				lv_predicate_4_0=RULE_STRING
				{
					newLeafNode(lv_predicate_4_0, grammarAccess.getTheoremAccess().getPredicateSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTheoremRule());
					}
					setWithLastConsumed(
						$current,
						"predicate",
						lv_predicate_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRuleBlock
entryRuleRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBlockRule()); }
	iv_ruleRuleBlock=ruleRuleBlock
	{ $current=$iv_ruleRuleBlock.current; }
	EOF;

// Rule RuleBlock
ruleRuleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getRuleBlockAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleBlockRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getRuleBlockAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleBlockRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleBlockAccess().getCommercialAtKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRuleBlockAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleBlockAccess().getColonKeyword_3());
		}
		(
			(
				otherlv_4='variables'
				{
					newLeafNode(otherlv_4, grammarAccess.getRuleBlockAccess().getVariablesKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleBlockAccess().getVariablesVariableParserRuleCall_4_0_1_0());
						}
						lv_variables_5_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleBlockRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"ac.soton.xtheory.Theory.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleBlockAccess().getRuleRuleParserRuleCall_4_1_0());
					}
					lv_rule_6_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleBlockRule());
						}
						set(
							$current,
							"rule",
							lv_rule_6_0,
							"ac.soton.xtheory.Theory.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRruleRewriteRuleParserRuleCall_0_0());
				}
				lv_rrule_0_0=ruleRewriteRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"rrule",
						lv_rrule_0_0,
						"ac.soton.xtheory.Theory.RewriteRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getIruleInferenceRuleParserRuleCall_1_0());
				}
				lv_irule_1_0=ruleInferenceRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"irule",
						lv_irule_1_0,
						"ac.soton.xtheory.Theory.InferenceRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_comment_0_1=RULE_ML_COMMENT
					{
						newLeafNode(lv_comment_0_1, grammarAccess.getVariableAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_1,
							"org.eclipse.xtext.common.Terminals.ML_COMMENT");
					}
					    |
					lv_comment_0_2=RULE_SL_COMMENT
					{
						newLeafNode(lv_comment_0_2, grammarAccess.getVariableAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"comment",
							lv_comment_0_2,
							"org.eclipse.xtext.common.Terminals.SL_COMMENT");
					}
				)
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getColonKeyword_2());
		}
		(
			(
				lv_type_3_0=RULE_STRING
				{
					newLeafNode(lv_type_3_0, grammarAccess.getVariableAccess().getTypeSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRewriteRule
entryRuleRewriteRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRewriteRuleRule()); }
	iv_ruleRewriteRule=ruleRewriteRule
	{ $current=$iv_ruleRewriteRule.current; }
	EOF;

// Rule RewriteRule
ruleRewriteRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_pattern_0_0=RULE_STRING
				{
					newLeafNode(lv_pattern_0_0, grammarAccess.getRewriteRuleAccess().getPatternSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRewriteRuleRule());
					}
					setWithLastConsumed(
						$current,
						"pattern",
						lv_pattern_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='=='
		{
			newLeafNode(otherlv_1, grammarAccess.getRewriteRuleAccess().getEqualsSignEqualsSignKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRewriteRuleAccess().getUruleUnconditionalRewriteParserRuleCall_2_0_0());
					}
					lv_urule_2_0=ruleUnconditionalRewrite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRewriteRuleRule());
						}
						set(
							$current,
							"urule",
							lv_urule_2_0,
							"ac.soton.xtheory.Theory.UnconditionalRewrite");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRewriteRuleAccess().getCruleConditionalRewriteParserRuleCall_2_1_0());
					}
					lv_crule_3_0=ruleConditionalRewrite
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRewriteRuleRule());
						}
						set(
							$current,
							"crule",
							lv_crule_3_0,
							"ac.soton.xtheory.Theory.ConditionalRewrite");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInferenceRule
entryRuleInferenceRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInferenceRuleRule()); }
	iv_ruleInferenceRule=ruleInferenceRule
	{ $current=$iv_ruleInferenceRule.current; }
	EOF;

// Rule InferenceRule
ruleInferenceRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInferenceRuleAccess().getGivenGivenParserRuleCall_0_0());
				}
				lv_given_0_0=ruleGiven
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInferenceRuleRule());
					}
					add(
						$current,
						"given",
						lv_given_0_0,
						"ac.soton.xtheory.Theory.Given");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='|-'
		{
			newLeafNode(otherlv_1, grammarAccess.getInferenceRuleAccess().getVerticalLineHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInferenceRuleAccess().getInferInferParserRuleCall_2_0());
				}
				lv_infer_2_0=ruleInfer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInferenceRuleRule());
					}
					set(
						$current,
						"infer",
						lv_infer_2_0,
						"ac.soton.xtheory.Theory.Infer");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGiven
entryRuleGiven returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGivenRule()); }
	iv_ruleGiven=ruleGiven
	{ $current=$iv_ruleGiven.current; }
	EOF;

// Rule Given
ruleGiven returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_expression_0_0=RULE_STRING
				{
					newLeafNode(lv_expression_0_0, grammarAccess.getGivenAccess().getExpressionSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGivenRule());
					}
					setWithLastConsumed(
						$current,
						"expression",
						lv_expression_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_required_1_0='required'
				{
					newLeafNode(lv_required_1_0, grammarAccess.getGivenAccess().getRequiredRequiredKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGivenRule());
					}
					setWithLastConsumed($current, "required", true, "required");
				}
			)
		)?
	)
;

// Entry rule entryRuleInfer
entryRuleInfer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInferRule()); }
	iv_ruleInfer=ruleInfer
	{ $current=$iv_ruleInfer.current; }
	EOF;

// Rule Infer
ruleInfer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_expression_0_0=RULE_STRING
			{
				newLeafNode(lv_expression_0_0, grammarAccess.getInferAccess().getExpressionSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInferRule());
				}
				setWithLastConsumed(
					$current,
					"expression",
					lv_expression_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleUnconditionalRewrite
entryRuleUnconditionalRewrite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnconditionalRewriteRule()); }
	iv_ruleUnconditionalRewrite=ruleUnconditionalRewrite
	{ $current=$iv_ruleUnconditionalRewrite.current; }
	EOF;

// Rule UnconditionalRewrite
ruleUnconditionalRewrite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_rhs_0_0=RULE_STRING
			{
				newLeafNode(lv_rhs_0_0, grammarAccess.getUnconditionalRewriteAccess().getRhsSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnconditionalRewriteRule());
				}
				addWithLastConsumed(
					$current,
					"rhs",
					lv_rhs_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleConditionalRewrite
entryRuleConditionalRewrite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRewriteRule()); }
	iv_ruleConditionalRewrite=ruleConditionalRewrite
	{ $current=$iv_ruleConditionalRewrite.current; }
	EOF;

// Rule ConditionalRewrite
ruleConditionalRewrite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRewriteAccess().getRewritesConditionalRewriteRuleParserRuleCall_0_0());
				}
				lv_rewrites_0_0=ruleConditionalRewriteRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRewriteRule());
					}
					add(
						$current,
						"rewrites",
						lv_rewrites_0_0,
						"ac.soton.xtheory.Theory.ConditionalRewriteRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRewriteAccess().getRewritesConditionalRewriteRuleParserRuleCall_1_0());
				}
				lv_rewrites_1_0=ruleConditionalRewriteRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRewriteRule());
					}
					add(
						$current,
						"rewrites",
						lv_rewrites_1_0,
						"ac.soton.xtheory.Theory.ConditionalRewriteRule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConditionalRewriteRule
entryRuleConditionalRewriteRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRewriteRuleRule()); }
	iv_ruleConditionalRewriteRule=ruleConditionalRewriteRule
	{ $current=$iv_ruleConditionalRewriteRule.current; }
	EOF;

// Rule ConditionalRewriteRule
ruleConditionalRewriteRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_lhs_0_0=RULE_STRING
				{
					newLeafNode(lv_lhs_0_0, grammarAccess.getConditionalRewriteRuleAccess().getLhsSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRewriteRuleRule());
					}
					setWithLastConsumed(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalRewriteRuleAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				lv_rhs_2_0=RULE_STRING
				{
					newLeafNode(lv_rhs_2_0, grammarAccess.getConditionalRewriteRuleAccess().getRhsSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRewriteRuleRule());
					}
					setWithLastConsumed(
						$current,
						"rhs",
						lv_rhs_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Rule Notation
ruleNotation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='prefix'
			{
				$current = grammarAccess.getNotationAccess().getPREFIXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNotationAccess().getPREFIXEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='infix'
			{
				$current = grammarAccess.getNotationAccess().getINFIXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNotationAccess().getINFIXEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='postfix'
			{
				$current = grammarAccess.getNotationAccess().getPOSTFIXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNotationAccess().getPOSTFIXEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
