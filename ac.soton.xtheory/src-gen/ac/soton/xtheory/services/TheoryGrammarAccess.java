/*
 * generated by Xtext 2.13.0
 */
package ac.soton.xtheory.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TheoryGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TheoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Theory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportsIDTerminalRuleCall_3_1_0 = (RuleCall)cImportsAssignment_3_1.eContents().get(0);
		private final Assignment cImportsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cImportsIDTerminalRuleCall_3_2_0 = (RuleCall)cImportsAssignment_3_2.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cTypesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTypesAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_4_0_1_0 = (RuleCall)cTypesAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cOperatorsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOperatorsOperatorParserRuleCall_4_1_1_0 = (RuleCall)cOperatorsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cAxiomsKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAxiomsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAxiomsAxiomParserRuleCall_4_2_1_0 = (RuleCall)cAxiomsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cAlternatives_4.eContents().get(3);
		private final Keyword cTheoremsKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTheoremsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTheoremsTheoremParserRuleCall_4_3_1_0 = (RuleCall)cTheoremsAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cAlternatives_4.eContents().get(4);
		private final Keyword cRulesKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Group cGroup_4_4_1 = (Group)cGroup_4_4.eContents().get(1);
		private final Keyword cVariablesKeyword_4_4_1_0 = (Keyword)cGroup_4_4_1.eContents().get(0);
		private final Assignment cVariablesAssignment_4_4_1_1 = (Assignment)cGroup_4_4_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_4_4_1_1_0 = (RuleCall)cVariablesAssignment_4_4_1_1.eContents().get(0);
		private final Assignment cRulesAssignment_4_4_2 = (Assignment)cGroup_4_4.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_4_4_2_0 = (RuleCall)cRulesAssignment_4_4_2.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////import "platform:/ressource/ac.soton.eventb.emf.core.theoryextension/model/eventbcoretheoryextension.ecore"
		//Theory:
		//	'theory' name=ID ('(' parameters+=Parameter+ ')')? ('imports' imports+=ID imports+=ID*)? ('types' types+=Type+ |
		//	'operators' operators+=Operator+ | 'axioms' axioms+=Axiom+ | 'theorems' theorems+=Theorem+ | 'rules' ('variables'
		//	variables+=Variable+)?
		//	rules+=Rule+)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'theory' name=ID ('(' parameters+=Parameter+ ')')? ('imports' imports+=ID imports+=ID*)? ('types' types+=Type+ |
		//'operators' operators+=Operator+ | 'axioms' axioms+=Axiom+ | 'theorems' theorems+=Theorem+ | 'rules' ('variables'
		//variables+=Variable+)? rules+=Rule+)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'theory'
		public Keyword getTheoryKeyword_0() { return cTheoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameters+=Parameter+ ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('imports' imports+=ID imports+=ID*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'imports'
		public Keyword getImportsKeyword_3_0() { return cImportsKeyword_3_0; }
		
		//imports+=ID
		public Assignment getImportsAssignment_3_1() { return cImportsAssignment_3_1; }
		
		//ID
		public RuleCall getImportsIDTerminalRuleCall_3_1_0() { return cImportsIDTerminalRuleCall_3_1_0; }
		
		//imports+=ID*
		public Assignment getImportsAssignment_3_2() { return cImportsAssignment_3_2; }
		
		//ID
		public RuleCall getImportsIDTerminalRuleCall_3_2_0() { return cImportsIDTerminalRuleCall_3_2_0; }
		
		//('types' types+=Type+ | 'operators' operators+=Operator+ | 'axioms' axioms+=Axiom+ | 'theorems' theorems+=Theorem+ |
		//'rules' ('variables' variables+=Variable+)? rules+=Rule+)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'types' types+=Type+
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'types'
		public Keyword getTypesKeyword_4_0_0() { return cTypesKeyword_4_0_0; }
		
		//types+=Type+
		public Assignment getTypesAssignment_4_0_1() { return cTypesAssignment_4_0_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_4_0_1_0() { return cTypesTypeParserRuleCall_4_0_1_0; }
		
		//'operators' operators+=Operator+
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'operators'
		public Keyword getOperatorsKeyword_4_1_0() { return cOperatorsKeyword_4_1_0; }
		
		//operators+=Operator+
		public Assignment getOperatorsAssignment_4_1_1() { return cOperatorsAssignment_4_1_1; }
		
		//Operator
		public RuleCall getOperatorsOperatorParserRuleCall_4_1_1_0() { return cOperatorsOperatorParserRuleCall_4_1_1_0; }
		
		//'axioms' axioms+=Axiom+
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'axioms'
		public Keyword getAxiomsKeyword_4_2_0() { return cAxiomsKeyword_4_2_0; }
		
		//axioms+=Axiom+
		public Assignment getAxiomsAssignment_4_2_1() { return cAxiomsAssignment_4_2_1; }
		
		//Axiom
		public RuleCall getAxiomsAxiomParserRuleCall_4_2_1_0() { return cAxiomsAxiomParserRuleCall_4_2_1_0; }
		
		//'theorems' theorems+=Theorem+
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'theorems'
		public Keyword getTheoremsKeyword_4_3_0() { return cTheoremsKeyword_4_3_0; }
		
		//theorems+=Theorem+
		public Assignment getTheoremsAssignment_4_3_1() { return cTheoremsAssignment_4_3_1; }
		
		//Theorem
		public RuleCall getTheoremsTheoremParserRuleCall_4_3_1_0() { return cTheoremsTheoremParserRuleCall_4_3_1_0; }
		
		//'rules' ('variables' variables+=Variable+)? rules+=Rule+
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//'rules'
		public Keyword getRulesKeyword_4_4_0() { return cRulesKeyword_4_4_0; }
		
		//('variables' variables+=Variable+)?
		public Group getGroup_4_4_1() { return cGroup_4_4_1; }
		
		//'variables'
		public Keyword getVariablesKeyword_4_4_1_0() { return cVariablesKeyword_4_4_1_0; }
		
		//variables+=Variable+
		public Assignment getVariablesAssignment_4_4_1_1() { return cVariablesAssignment_4_4_1_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_4_1_1_0() { return cVariablesVariableParserRuleCall_4_4_1_1_0; }
		
		//rules+=Rule+
		public Assignment getRulesAssignment_4_4_2() { return cRulesAssignment_4_4_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_4_2_0() { return cRulesRuleParserRuleCall_4_4_2_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParametersParameterCrossReference_2_1_0 = (CrossReference)cParametersAssignment_2_1.eContents().get(0);
		private final RuleCall cParametersParameterIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParametersParameterCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cConstructorsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cConstructorsConstructorParserRuleCall_2_4_0 = (RuleCall)cConstructorsAssignment_2_4.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cVerticalLineKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cConstructorsAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cConstructorsConstructorParserRuleCall_2_5_1_0 = (RuleCall)cConstructorsAssignment_2_5_1.eContents().get(0);
		
		//Type:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ('(' parameters+=[Parameter]+ ')'
		//	'=' constructors+=Constructor ('|' constructors+=Constructor)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ('(' parameters+=[Parameter]+ ')' '=' constructors+=Constructor ('|'
		//constructors+=Constructor)*)?
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameters+=[Parameter]+ ')' '=' constructors+=Constructor ('|' constructors+=Constructor)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=[Parameter]+
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//[Parameter]
		public CrossReference getParametersParameterCrossReference_2_1_0() { return cParametersParameterCrossReference_2_1_0; }
		
		//ID
		public RuleCall getParametersParameterIDTerminalRuleCall_2_1_0_1() { return cParametersParameterIDTerminalRuleCall_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }
		
		//constructors+=Constructor
		public Assignment getConstructorsAssignment_2_4() { return cConstructorsAssignment_2_4; }
		
		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_2_4_0() { return cConstructorsConstructorParserRuleCall_2_4_0; }
		
		//('|' constructors+=Constructor)*
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_5_0() { return cVerticalLineKeyword_2_5_0; }
		
		//constructors+=Constructor
		public Assignment getConstructorsAssignment_2_5_1() { return cConstructorsAssignment_2_5_1; }
		
		//Constructor
		public RuleCall getConstructorsConstructorParserRuleCall_2_5_1_0() { return cConstructorsConstructorParserRuleCall_2_5_1_0; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestructorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDestructorsDestructorParserRuleCall_2_1_0 = (RuleCall)cDestructorsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDestructorsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDestructorsDestructorParserRuleCall_2_2_1_0 = (RuleCall)cDestructorsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Constructor:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ('(' destructors+=Destructor (',' destructors+=Destructor)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ('(' destructors+=Destructor (',' destructors+=Destructor)* ')')?
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' destructors+=Destructor (',' destructors+=Destructor)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//destructors+=Destructor
		public Assignment getDestructorsAssignment_2_1() { return cDestructorsAssignment_2_1; }
		
		//Destructor
		public RuleCall getDestructorsDestructorParserRuleCall_2_1_0() { return cDestructorsDestructorParserRuleCall_2_1_0; }
		
		//(',' destructors+=Destructor)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//destructors+=Destructor
		public Assignment getDestructorsAssignment_2_2_1() { return cDestructorsAssignment_2_2_1; }
		
		//Destructor
		public RuleCall getDestructorsDestructorParserRuleCall_2_2_1_0() { return cDestructorsDestructorParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class DestructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Destructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Destructor:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ":" type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ":" type=STRING
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=STRING
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_3_0() { return cTypeSTRINGTerminalRuleCall_3_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTypeAssignment_3_0_1.eContents().get(0);
		private final Assignment cNotationAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cNotationNotationEnumRuleCall_3_1_0 = (RuleCall)cNotationAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Assignment cAssociativeAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final Keyword cAssociativeAssociativeKeyword_3_2_0_0 = (Keyword)cAssociativeAssignment_3_2_0.eContents().get(0);
		private final Assignment cCommutativeAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Keyword cCommutativeCommutativeKeyword_3_2_1_0 = (Keyword)cCommutativeAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNumberSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPrecedentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPrecedentINTTerminalRuleCall_4_1_0 = (RuleCall)cPrecedentAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWdAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWdSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cWdAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cDefinitionAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cDefinitionSTRINGTerminalRuleCall_6_1_0_0 = (RuleCall)cDefinitionAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cAlternatives_6_1.eContents().get(1);
		private final Keyword cCaseKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cCaseAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cCaseIDTerminalRuleCall_6_1_1_1_0 = (RuleCall)cCaseAssignment_6_1_1_1.eContents().get(0);
		private final Assignment cCasesAssignment_6_1_1_2 = (Assignment)cGroup_6_1_1.eContents().get(2);
		private final RuleCall cCasesCaseParserRuleCall_6_1_1_2_0 = (RuleCall)cCasesAssignment_6_1_1_2.eContents().get(0);
		
		//Operator:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ('(' arguments+=Argument (',' arguments+=Argument)* ')')? ((':' type=STRING)? & notation=Notation? &
		//	(associative?='associative' commutative?='commutative'?)?) ('#' precedent=INT)? ('for' wd=STRING)? ('='
		//	(definition=STRING
		//	|
		//	'case' case=ID cases+=Case+))?;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ('(' arguments+=Argument (',' arguments+=Argument)* ')')? ((':' type=STRING)?
		//& notation=Notation? & (associative?='associative' commutative?='commutative'?)?) ('#' precedent=INT)? ('for'
		//wd=STRING)? ('=' (definition=STRING | 'case' case=ID cases+=Case+))?
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' arguments+=Argument (',' arguments+=Argument)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_1_0() { return cArgumentsArgumentParserRuleCall_2_1_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_2_1_0() { return cArgumentsArgumentParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//(':' type=STRING)? & notation=Notation? & (associative?='associative' commutative?='commutative'?)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//(':' type=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_3_0_1() { return cTypeAssignment_3_0_1; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_3_0_1_0() { return cTypeSTRINGTerminalRuleCall_3_0_1_0; }
		
		//notation=Notation?
		public Assignment getNotationAssignment_3_1() { return cNotationAssignment_3_1; }
		
		//Notation
		public RuleCall getNotationNotationEnumRuleCall_3_1_0() { return cNotationNotationEnumRuleCall_3_1_0; }
		
		//(associative?='associative' commutative?='commutative'?)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//associative?='associative'
		public Assignment getAssociativeAssignment_3_2_0() { return cAssociativeAssignment_3_2_0; }
		
		//'associative'
		public Keyword getAssociativeAssociativeKeyword_3_2_0_0() { return cAssociativeAssociativeKeyword_3_2_0_0; }
		
		//commutative?='commutative'?
		public Assignment getCommutativeAssignment_3_2_1() { return cCommutativeAssignment_3_2_1; }
		
		//'commutative'
		public Keyword getCommutativeCommutativeKeyword_3_2_1_0() { return cCommutativeCommutativeKeyword_3_2_1_0; }
		
		//('#' precedent=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'#'
		public Keyword getNumberSignKeyword_4_0() { return cNumberSignKeyword_4_0; }
		
		//precedent=INT
		public Assignment getPrecedentAssignment_4_1() { return cPrecedentAssignment_4_1; }
		
		//INT
		public RuleCall getPrecedentINTTerminalRuleCall_4_1_0() { return cPrecedentINTTerminalRuleCall_4_1_0; }
		
		//('for' wd=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'for'
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }
		
		//wd=STRING
		public Assignment getWdAssignment_5_1() { return cWdAssignment_5_1; }
		
		//STRING
		public RuleCall getWdSTRINGTerminalRuleCall_5_1_0() { return cWdSTRINGTerminalRuleCall_5_1_0; }
		
		//('=' (definition=STRING | 'case' case=ID cases+=Case+))?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//definition=STRING | 'case' case=ID cases+=Case+
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//definition=STRING
		public Assignment getDefinitionAssignment_6_1_0() { return cDefinitionAssignment_6_1_0; }
		
		//STRING
		public RuleCall getDefinitionSTRINGTerminalRuleCall_6_1_0_0() { return cDefinitionSTRINGTerminalRuleCall_6_1_0_0; }
		
		//'case' case=ID cases+=Case+
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }
		
		//'case'
		public Keyword getCaseKeyword_6_1_1_0() { return cCaseKeyword_6_1_1_0; }
		
		//case=ID
		public Assignment getCaseAssignment_6_1_1_1() { return cCaseAssignment_6_1_1_1; }
		
		//ID
		public RuleCall getCaseIDTerminalRuleCall_6_1_1_1_0() { return cCaseIDTerminalRuleCall_6_1_1_1_0; }
		
		//cases+=Case+
		public Assignment getCasesAssignment_6_1_1_2() { return cCasesAssignment_6_1_1_2; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_6_1_1_2_0() { return cCasesCaseParserRuleCall_6_1_1_2_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Argument:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ":" type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ":" type=STRING
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=STRING
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_3_0() { return cTypeSTRINGTerminalRuleCall_3_0; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternSTRINGTerminalRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormulaSTRINGTerminalRuleCall_2_0 = (RuleCall)cFormulaAssignment_2.eContents().get(0);
		
		//Case:
		//	pattern=STRING "=>" formula=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=STRING "=>" formula=STRING
		public Group getGroup() { return cGroup; }
		
		//pattern=STRING
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_0_0() { return cPatternSTRINGTerminalRuleCall_0_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//formula=STRING
		public Assignment getFormulaAssignment_2() { return cFormulaAssignment_2; }
		
		//STRING
		public RuleCall getFormulaSTRINGTerminalRuleCall_2_0() { return cFormulaSTRINGTerminalRuleCall_2_0; }
	}
	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Axiom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//Axiom:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	'@' name=ID ':' predicate=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? '@' name=ID ':' predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_4_0() { return cPredicateSTRINGTerminalRuleCall_4_0; }
	}
	public class TheoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//Theorem:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	'@' name=ID ':' predicate=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? '@' name=ID ':' predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_4_0() { return cPredicateSTRINGTerminalRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Variable:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID ':' type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? name=ID ':' type=STRING
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=STRING
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_3_0() { return cTypeSTRINGTerminalRuleCall_3_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommentAlternatives_0_0 = (Alternatives)cCommentAssignment_0.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cCommentAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0_0_1 = (RuleCall)cCommentAlternatives_0_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRruleAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRruleRewriteRuleParserRuleCall_4_0_0 = (RuleCall)cRruleAssignment_4_0.eContents().get(0);
		private final Assignment cIruleAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cIruleInferenceRuleParserRuleCall_4_1_0 = (RuleCall)cIruleAssignment_4_1.eContents().get(0);
		
		//Rule:
		//	comment=(ML_COMMENT | SL_COMMENT)?
		//	'@' name=ID ':' (rrule=RewriteRule | irule=InferenceRule);
		@Override public ParserRule getRule() { return rule; }
		
		//comment=(ML_COMMENT | SL_COMMENT)? '@' name=ID ':' (rrule=RewriteRule | irule=InferenceRule)
		public Group getGroup() { return cGroup; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_0_0() { return cCommentAlternatives_0_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_0_0_0() { return cCommentML_COMMENTTerminalRuleCall_0_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0_0_1() { return cCommentSL_COMMENTTerminalRuleCall_0_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//rrule=RewriteRule | irule=InferenceRule
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//rrule=RewriteRule
		public Assignment getRruleAssignment_4_0() { return cRruleAssignment_4_0; }
		
		//RewriteRule
		public RuleCall getRruleRewriteRuleParserRuleCall_4_0_0() { return cRruleRewriteRuleParserRuleCall_4_0_0; }
		
		//irule=InferenceRule
		public Assignment getIruleAssignment_4_1() { return cIruleAssignment_4_1; }
		
		//InferenceRule
		public RuleCall getIruleInferenceRuleParserRuleCall_4_1_0() { return cIruleInferenceRuleParserRuleCall_4_1_0; }
	}
	public class RewriteRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.RewriteRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternSTRINGTerminalRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUruleAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUruleUnconditionalRewriteParserRuleCall_2_0_0 = (RuleCall)cUruleAssignment_2_0.eContents().get(0);
		private final Assignment cCruleAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCruleConditionalRewriteParserRuleCall_2_1_0 = (RuleCall)cCruleAssignment_2_1.eContents().get(0);
		
		//RewriteRule:
		//	pattern=STRING '==' (urule=UnconditionalRewrite | crule=ConditionalRewrite);
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=STRING '==' (urule=UnconditionalRewrite | crule=ConditionalRewrite)
		public Group getGroup() { return cGroup; }
		
		//pattern=STRING
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_0_0() { return cPatternSTRINGTerminalRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//urule=UnconditionalRewrite | crule=ConditionalRewrite
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//urule=UnconditionalRewrite
		public Assignment getUruleAssignment_2_0() { return cUruleAssignment_2_0; }
		
		//UnconditionalRewrite
		public RuleCall getUruleUnconditionalRewriteParserRuleCall_2_0_0() { return cUruleUnconditionalRewriteParserRuleCall_2_0_0; }
		
		//crule=ConditionalRewrite
		public Assignment getCruleAssignment_2_1() { return cCruleAssignment_2_1; }
		
		//ConditionalRewrite
		public RuleCall getCruleConditionalRewriteParserRuleCall_2_1_0() { return cCruleConditionalRewriteParserRuleCall_2_1_0; }
	}
	public class InferenceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.InferenceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGivenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGivenGivenParserRuleCall_0_0 = (RuleCall)cGivenAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInferAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInferInferParserRuleCall_2_0 = (RuleCall)cInferAssignment_2.eContents().get(0);
		
		//InferenceRule:
		//	given+=Given* '|-' infer=Infer;
		@Override public ParserRule getRule() { return rule; }
		
		//given+=Given* '|-' infer=Infer
		public Group getGroup() { return cGroup; }
		
		//given+=Given*
		public Assignment getGivenAssignment_0() { return cGivenAssignment_0; }
		
		//Given
		public RuleCall getGivenGivenParserRuleCall_0_0() { return cGivenGivenParserRuleCall_0_0; }
		
		//'|-'
		public Keyword getVerticalLineHyphenMinusKeyword_1() { return cVerticalLineHyphenMinusKeyword_1; }
		
		//infer=Infer
		public Assignment getInferAssignment_2() { return cInferAssignment_2; }
		
		//Infer
		public RuleCall getInferInferParserRuleCall_2_0() { return cInferInferParserRuleCall_2_0; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredAssignment_1.eContents().get(0);
		
		//Given:
		//	expression=STRING required?='required'?;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=STRING required?='required'?
		public Group getGroup() { return cGroup; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_0_0() { return cExpressionSTRINGTerminalRuleCall_0_0; }
		
		//required?='required'?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }
		
		//'required'
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }
	}
	public class InferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Infer");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Infer:
		//	expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=STRING
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_0() { return cExpressionSTRINGTerminalRuleCall_0; }
	}
	public class UnconditionalRewriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.UnconditionalRewrite");
		private final Assignment cRhsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRhsSTRINGTerminalRuleCall_0 = (RuleCall)cRhsAssignment.eContents().get(0);
		
		//UnconditionalRewrite:
		//	rhs+=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//rhs+=STRING
		public Assignment getRhsAssignment() { return cRhsAssignment; }
		
		//STRING
		public RuleCall getRhsSTRINGTerminalRuleCall_0() { return cRhsSTRINGTerminalRuleCall_0; }
	}
	public class ConditionalRewriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.ConditionalRewrite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRewritesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRewritesConditionalRewriteRuleParserRuleCall_0_0 = (RuleCall)cRewritesAssignment_0.eContents().get(0);
		private final Assignment cRewritesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRewritesConditionalRewriteRuleParserRuleCall_1_0 = (RuleCall)cRewritesAssignment_1.eContents().get(0);
		
		//ConditionalRewrite:
		//	rewrites+=ConditionalRewriteRule
		//	rewrites+=ConditionalRewriteRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//rewrites+=ConditionalRewriteRule rewrites+=ConditionalRewriteRule*
		public Group getGroup() { return cGroup; }
		
		//rewrites+=ConditionalRewriteRule
		public Assignment getRewritesAssignment_0() { return cRewritesAssignment_0; }
		
		//ConditionalRewriteRule
		public RuleCall getRewritesConditionalRewriteRuleParserRuleCall_0_0() { return cRewritesConditionalRewriteRuleParserRuleCall_0_0; }
		
		//rewrites+=ConditionalRewriteRule*
		public Assignment getRewritesAssignment_1() { return cRewritesAssignment_1; }
		
		//ConditionalRewriteRule
		public RuleCall getRewritesConditionalRewriteRuleParserRuleCall_1_0() { return cRewritesConditionalRewriteRuleParserRuleCall_1_0; }
	}
	public class ConditionalRewriteRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.ConditionalRewriteRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsSTRINGTerminalRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsSTRINGTerminalRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//ConditionalRewriteRule:
		//	lhs=STRING '=>' rhs=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=STRING '=>' rhs=STRING
		public Group getGroup() { return cGroup; }
		
		//lhs=STRING
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//STRING
		public RuleCall getLhsSTRINGTerminalRuleCall_0_0() { return cLhsSTRINGTerminalRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//rhs=STRING
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//STRING
		public RuleCall getRhsSTRINGTerminalRuleCall_2_0() { return cRhsSTRINGTerminalRuleCall_2_0; }
	}
	
	public class NotationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xtheory.Theory.Notation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPREFIXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPREFIXPrefixKeyword_0_0 = (Keyword)cPREFIXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINFIXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINFIXInfixKeyword_1_0 = (Keyword)cINFIXEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTFIXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPOSTFIXPostfixKeyword_2_0 = (Keyword)cPOSTFIXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Notation:
		//	PREFIX='prefix' | INFIX='infix' | POSTFIX='postfix';
		public EnumRule getRule() { return rule; }
		
		//PREFIX='prefix' | INFIX='infix' | POSTFIX='postfix'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PREFIX='prefix'
		public EnumLiteralDeclaration getPREFIXEnumLiteralDeclaration_0() { return cPREFIXEnumLiteralDeclaration_0; }
		
		//'prefix'
		public Keyword getPREFIXPrefixKeyword_0_0() { return cPREFIXPrefixKeyword_0_0; }
		
		//INFIX='infix'
		public EnumLiteralDeclaration getINFIXEnumLiteralDeclaration_1() { return cINFIXEnumLiteralDeclaration_1; }
		
		//'infix'
		public Keyword getINFIXInfixKeyword_1_0() { return cINFIXInfixKeyword_1_0; }
		
		//POSTFIX='postfix'
		public EnumLiteralDeclaration getPOSTFIXEnumLiteralDeclaration_2() { return cPOSTFIXEnumLiteralDeclaration_2; }
		
		//'postfix'
		public Keyword getPOSTFIXPostfixKeyword_2_0() { return cPOSTFIXPostfixKeyword_2_0; }
	}
	
	private final TheoryElements pTheory;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final ConstructorElements pConstructor;
	private final DestructorElements pDestructor;
	private final OperatorElements pOperator;
	private final ArgumentElements pArgument;
	private final NotationElements eNotation;
	private final CaseElements pCase;
	private final AxiomElements pAxiom;
	private final TheoremElements pTheorem;
	private final VariableElements pVariable;
	private final RuleElements pRule;
	private final RewriteRuleElements pRewriteRule;
	private final InferenceRuleElements pInferenceRule;
	private final GivenElements pGiven;
	private final InferElements pInfer;
	private final UnconditionalRewriteElements pUnconditionalRewrite;
	private final ConditionalRewriteElements pConditionalRewrite;
	private final ConditionalRewriteRuleElements pConditionalRewriteRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TheoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTheory = new TheoryElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pConstructor = new ConstructorElements();
		this.pDestructor = new DestructorElements();
		this.pOperator = new OperatorElements();
		this.pArgument = new ArgumentElements();
		this.eNotation = new NotationElements();
		this.pCase = new CaseElements();
		this.pAxiom = new AxiomElements();
		this.pTheorem = new TheoremElements();
		this.pVariable = new VariableElements();
		this.pRule = new RuleElements();
		this.pRewriteRule = new RewriteRuleElements();
		this.pInferenceRule = new InferenceRuleElements();
		this.pGiven = new GivenElements();
		this.pInfer = new InferElements();
		this.pUnconditionalRewrite = new UnconditionalRewriteElements();
		this.pConditionalRewrite = new ConditionalRewriteElements();
		this.pConditionalRewriteRule = new ConditionalRewriteRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xtheory.Theory".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/ressource/ac.soton.eventb.emf.core.theoryextension/model/eventbcoretheoryextension.ecore"
	//Theory:
	//	'theory' name=ID ('(' parameters+=Parameter+ ')')? ('imports' imports+=ID imports+=ID*)? ('types' types+=Type+ |
	//	'operators' operators+=Operator+ | 'axioms' axioms+=Axiom+ | 'theorems' theorems+=Theorem+ | 'rules' ('variables'
	//	variables+=Variable+)?
	//	rules+=Rule+)*
	//	'end';
	public TheoryElements getTheoryAccess() {
		return pTheory;
	}
	
	public ParserRule getTheoryRule() {
		return getTheoryAccess().getRule();
	}
	
	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ('(' parameters+=[Parameter]+ ')'
	//	'=' constructors+=Constructor ('|' constructors+=Constructor)*)?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Constructor:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ('(' destructors+=Destructor (',' destructors+=Destructor)* ')')?;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Destructor:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ":" type=STRING;
	public DestructorElements getDestructorAccess() {
		return pDestructor;
	}
	
	public ParserRule getDestructorRule() {
		return getDestructorAccess().getRule();
	}
	
	//Operator:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ('(' arguments+=Argument (',' arguments+=Argument)* ')')? ((':' type=STRING)? & notation=Notation? &
	//	(associative?='associative' commutative?='commutative'?)?) ('#' precedent=INT)? ('for' wd=STRING)? ('='
	//	(definition=STRING
	//	|
	//	'case' case=ID cases+=Case+))?;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Argument:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ":" type=STRING;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//enum Notation:
	//	PREFIX='prefix' | INFIX='infix' | POSTFIX='postfix';
	public NotationElements getNotationAccess() {
		return eNotation;
	}
	
	public EnumRule getNotationRule() {
		return getNotationAccess().getRule();
	}
	
	//Case:
	//	pattern=STRING "=>" formula=STRING;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//Axiom:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	'@' name=ID ':' predicate=STRING;
	public AxiomElements getAxiomAccess() {
		return pAxiom;
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}
	
	//Theorem:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	'@' name=ID ':' predicate=STRING;
	public TheoremElements getTheoremAccess() {
		return pTheorem;
	}
	
	public ParserRule getTheoremRule() {
		return getTheoremAccess().getRule();
	}
	
	//Variable:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID ':' type=STRING;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Rule:
	//	comment=(ML_COMMENT | SL_COMMENT)?
	//	'@' name=ID ':' (rrule=RewriteRule | irule=InferenceRule);
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RewriteRule:
	//	pattern=STRING '==' (urule=UnconditionalRewrite | crule=ConditionalRewrite);
	public RewriteRuleElements getRewriteRuleAccess() {
		return pRewriteRule;
	}
	
	public ParserRule getRewriteRuleRule() {
		return getRewriteRuleAccess().getRule();
	}
	
	//InferenceRule:
	//	given+=Given* '|-' infer=Infer;
	public InferenceRuleElements getInferenceRuleAccess() {
		return pInferenceRule;
	}
	
	public ParserRule getInferenceRuleRule() {
		return getInferenceRuleAccess().getRule();
	}
	
	//Given:
	//	expression=STRING required?='required'?;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//Infer:
	//	expression=STRING;
	public InferElements getInferAccess() {
		return pInfer;
	}
	
	public ParserRule getInferRule() {
		return getInferAccess().getRule();
	}
	
	//UnconditionalRewrite:
	//	rhs+=STRING;
	public UnconditionalRewriteElements getUnconditionalRewriteAccess() {
		return pUnconditionalRewrite;
	}
	
	public ParserRule getUnconditionalRewriteRule() {
		return getUnconditionalRewriteAccess().getRule();
	}
	
	//ConditionalRewrite:
	//	rewrites+=ConditionalRewriteRule
	//	rewrites+=ConditionalRewriteRule*;
	public ConditionalRewriteElements getConditionalRewriteAccess() {
		return pConditionalRewrite;
	}
	
	public ParserRule getConditionalRewriteRule() {
		return getConditionalRewriteAccess().getRule();
	}
	
	//ConditionalRewriteRule:
	//	lhs=STRING '=>' rhs=STRING;
	public ConditionalRewriteRuleElements getConditionalRewriteRuleAccess() {
		return pConditionalRewriteRule;
	}
	
	public ParserRule getConditionalRewriteRuleRule() {
		return getConditionalRewriteRuleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
