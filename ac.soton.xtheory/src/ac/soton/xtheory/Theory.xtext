grammar ac.soton.xtheory.Theory with org.eclipse.xtext.common.Terminals hidden (WS)

//generate theory "http://www.soton.ac/xtheory/Theory"
//import "http://emf.eventb.org/models/core/2014" as eventbcore
import "http://soton.ac.uk/models/eventb/theoryextension/2018"
//import "platform:/ressource/ac.soton.eventb.emf.core.theoryextension/model/eventbcoretheoryextension.ecore"

Theory:
	'theory' name=ID ('(' parameters+=Parameter+')')?
	('imports' imports +=ID (imports += ID)*)?
	(
		('types' internalElements += Type+) |
		('operators' internalElements += Operator+) |
		('axioms' internalElements += Axiom+) |
		('theorems' internalElements += Theorem+) |
		('rules' internalElements += RuleBlock+)
	)*
	'end'
;

Parameter:
	name = ID	
;

Type:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID
	(
		'(' parameters += [Parameter]+')'
	)?
	'=' constructors += Constructor ('|' constructors += Constructor)*
;

Constructor:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID
	('(' destructors += Destructor (',' destructors += Destructor)* ')')?	
;

Destructor:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID ":" type=STRING
;

Operator:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID ('(' arguments += Argument (',' arguments += Argument)*')')?
	(
		(':' type=STRING)? &
		(notation = Notation)? &
		(associative ?= 'associative' commutative ?= 'commutative'?)?
	)
	('#' precedent=INT)?
	('for' wd=STRING)?
	(
		'=' 
		(
			definition=STRING
		|
			'case' case=ID (cases += Case+)
		)		
	)?
;

Argument:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID ":" type=STRING
;

enum Notation:
  PREFIX='prefix' | INFIX='infix' | POSTFIX='postfix';

Case:
	pattern=STRING "=>" formula=STRING
;

Axiom:
	(comment = (ML_COMMENT | SL_COMMENT))?
	'@'name=ID':' predicate=STRING
;

Theorem:
	(comment = (ML_COMMENT | SL_COMMENT))?
	'@'name=ID':' predicate=STRING
;

RuleBlock: 
	(comment = (ML_COMMENT | SL_COMMENT))?
	'@'name=ID':'
	(
		('variables' variables += Variable+)?
		rule = Rule
	)
;

Rule:
	//(comment = (ML_COMMENT | SL_COMMENT))?
	//'@'name=ID':'
	(
		rrule=RewriteRule |
		irule=InferenceRule
	)
;

Variable:
	(comment = (ML_COMMENT | SL_COMMENT))?
	name=ID ':' type=STRING
;

RewriteRule:
	pattern=STRING '=='
	(
		urule = UnconditionalRewrite |	
		crule = ConditionalRewrite
	)
;

InferenceRule:
	given+=Given* '|-' infer=Infer
;

Given:
	expression=STRING (required?='required')?
;

Infer:
	expression=STRING
;

UnconditionalRewrite: 
	rhs += STRING
;


ConditionalRewrite:
	rewrites += ConditionalRewriteRule
	(rewrites += ConditionalRewriteRule)*	
;

ConditionalRewriteRule:
	lhs = STRING '=>' rhs = STRING
;